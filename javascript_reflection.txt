Goal: To Create an interactive resume, while doing the JS Basics course.

General
	- The javascript interpreter takes the code you write and prepare it to become machine codes.
	- Javascript has no classes, unlike python.
	- Functions are objects too. 
	- Encapsulation: Objects can encapsulate functions as well. ie, functions can be inside var obj = {}
	- All variable declarations (including functions) get moved to the top of their scope.
	- A closure is any function which remains available after its outer scopes have already returned. 
	
Objects
	- Objects may be created using object literal:
		var my_obj = {}
	- Items inside objects can be defined using:
		dot notation: bio.name = "Haopei";
		bracket notation: bio['age'] = 26;
	- Items inside onjects can be accessed via bracket notations ALWAYS, while dot notation access has some special rules: property-3, property 3, 8property, property[], property()

Functions
	- A function declaration creates a new scope within it.
	- encodeURI(HTML) // encodes html strings
	- [string].slice(begin[,end])
	- [string].replace([old],[new])
	- When a function is decleared without var ( example: function myfunc(){} ), its definition and declaration is moved to the top of the scope. Therefore, you can call the function ( myfunc() ) before where the function is written.
	- When a function is declared as a variable, only its declaration is moved to the top, but its definition remains where you write this function. You can only call this function after the place of its code.
	- The executional context of a function appears inside the context in which it was created. An inside nested function, which is then stored as a global variable, and when executed, will create its executional context inside its parent's context. It would also have the scope access of its parent function even if it had already returned. 

Scope
	- `if` statements do not create a new scope, so it does not limit access of its contained variables.

Jargon
	document
		Refers to the webpage in its current state.
		The DOM contains all information about the webpage's visible elements. The document is the DOM.
	undefined: 
		The value does not exist in the intepreter, and it does now know what you are referring to.
	null
		The variable exists but holds no value.
	`new` keyword
		This keyword creates a new instance of an object
			var Car = function(name){};
			var toyota = new Car('Toyota')


d3.js
	Binds arbitrary data to the DOM, then applies data-driven transformations to the document. 

Project Rubric
	Repository
		Submit in the form of repository
	Content: 
		All resume sections include real/fake data.
	Function Use: 
		All resume sections are built using modular functions which can run in any order; does not use much spaghetti code. 
	Encalsulation
		All code to display each resume section is contained within object with data for the same section.
	Additional Interactivity:
		The resume includes interactivity (menu navigation, polymer components), including the map which pulls location data from the resume.
	Artistic Creativity
		Includes custom CSS that alters colours as well as layout of the page.